"""Create an execution summary table, rename existing execution table

Revision ID: 955122a76711
Revises: 0d4a3ce9c0a9
Create Date: 2019-04-09 12:12:32.848546

"""
from alembic import op
import sqlalchemy as sa
import uuid
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '955122a76711'
down_revision = '0d4a3ce9c0a9'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('execution',
                    sa.Column('id', postgresql.UUID(as_uuid=True),
                              default=uuid.uuid4, nullable=False),
                    sa.Column('execution_started', sa.DateTime(timezone=True),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('execution_ended', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('execution_time_s', sa.Integer(), nullable=True),
                    sa.Column('total_rows_processed', sa.BigInteger(), nullable=True),
                    sa.Column('total_models_processed', sa.Integer(), nullable=True),
                    sa.Column('status', sa.String(length=25), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    schema='rdl'
                    )

    op.execute('ALTER TABLE rdl.data_load_execution RENAME COLUMN correlation_id TO execution_id')
    op.execute(
        '''
        INSERT INTO rdl.execution (
            id, execution_started,
            execution_ended, execution_time_s, total_rows_processed, total_models_processed, status
            )
        SELECT
            execution_id, MAX(completed_on) - make_interval(secs := SUM(execution_time_ms)::decimal / 1000),
            MAX(completed_on), SUM(execution_time_ms) / 1000, SUM(rows_processed), COUNT(id), 'UNKNOWN'
        FROM rdl.data_load_execution
        GROUP BY execution_id
        ''')
    op.execute("UPDATE rdl.data_load_execution SET status = 'Successful' WHERE status = 'Completed Successfully'")

    op.create_foreign_key(None, 'data_load_execution', 'execution', ['execution_id'],
                          ['id'], source_schema='rdl', referent_schema='rdl')

    op.add_column('data_load_execution', sa.Column('started_on', sa.DateTime(timezone=True),
                                                   server_default=sa.text('now()'), nullable=True), schema='rdl')
    op.execute(
        '''
        UPDATE rdl.data_load_execution
        SET started_on = completed_on - make_interval(secs := execution_time_ms::decimal / 1000)
        ''')
    op.alter_column('data_load_execution', 'started_on', nullable=False, schema='rdl')

    op.drop_column('data_load_execution', 'id', schema='rdl')
    op.create_primary_key("pk_data_load_execution", "data_load_execution",
                          ["execution_id", "model_name"],  schema='rdl')

    op.execute('ALTER TABLE rdl.data_load_execution RENAME TO execution_model')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.execute('ALTER TABLE rdl.execution_model RENAME TO data_load_execution')

    op.execute('ALTER TABLE rdl.data_load_execution DROP CONSTRAINT pk_data_load_execution')
    op.execute('CREATE SEQUENCE rdl.data_load_execution_id_seq')
    op.add_column('data_load_execution', sa.Column(
        'id', sa.INTEGER(),
        server_default=sa.text("nextval('rdl.data_load_execution_id_seq'::regclass)"),
        autoincrement=True, nullable=False), schema='rdl')
    op.create_primary_key("pk_data_load_execution", "data_load_execution", ["id"],  schema='rdl')

    op.execute('ALTER SEQUENCE rdl.data_load_execution_id_seq OWNED BY rdl.data_load_execution.id')
    op.drop_column('data_load_execution', 'started_on', schema='rdl')

    op.drop_constraint("data_load_execution_execution_id_fkey",
                       'data_load_execution', schema='rdl', type_='foreignkey')

    op.execute("UPDATE rdl.data_load_execution SET status = 'Completed Successfully' WHERE status = 'Successful'")
    op.execute('ALTER TABLE rdl.data_load_execution RENAME COLUMN execution_id TO correlation_id')
    op.drop_table('execution', schema='rdl')
    # ### end Alembic commands ###
